name: deploy

on:
  workflow_run:
    workflows: ["build"]
    types: [completed]
    branches: [main, "v*"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: "minbzk/ai-verordening-beslishulp"
  APP_URL: "https://ai-verordening-beslishulp.apps.digilab.network"

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only deploy if build was successful and it's a latest release
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'release'
    permissions:
      contents: read
    outputs:
      is_latest: ${{ steps.get_version.outputs.is_latest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'minbzk/ai-validation-infra'
          ref: main
          token: ${{ secrets.GH_PAT }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if latest version
        id: get_version
        run: |
          # Get raw version from release branch
          RAW_VERSION="${{ github.event.workflow_run.head_branch }}"
          echo "Raw version from tag_name is: $RAW_VERSION"

          # Validate tag follows convention (starts with v or V)
          if [[ ! "$RAW_VERSION" =~ ^[vV] ]]; then
            echo "❌ Error: Release tag '$RAW_VERSION' does not follow the convention of starting with 'v' or 'V'"
            echo "Deployment will be skipped - only tags starting with 'v' are supported"
            echo "IS_LATEST=false" >> "$GITHUB_ENV"
            echo "is_latest=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Clean current version: normalize by removing 'v' prefix (case insensitive), any period after v, and '.' suffix
          VERSION=$(echo "$RAW_VERSION" | sed -E 's/^[vV]\.?//;s/\.$//')
          echo "Raw version from release: $RAW_VERSION -> Normalized: $VERSION"

          # Extract and normalize all version tags - only consider tags starting with v or V
          ALL_VERSIONS=$(gh release list --limit 10 | grep -v Draft | awk '{print $1}' | grep -E "^[vV]")
          echo "All version tags (filtered to v/V only):"
          echo "$ALL_VERSIONS"

          # Normalize versions for comparison
          NORMALIZED_VERSIONS=$(echo "$ALL_VERSIONS" | sed -E 's/^[vV]\.?//;s/\.$//')
          echo "Normalized versions:"
          echo "$NORMALIZED_VERSIONS"

          # Determine if this is the latest version, using semantic version sorting
          if [ "$(echo -e "$VERSION\n$LATEST" | sort -V | tail -n1)" = "$VERSION" ]; then
            IS_LATEST="true"
            echo "✅ Current version $VERSION is the latest version"
          else
            IS_LATEST="false"
            echo "⚠️ Current version $VERSION is not the latest version ($LATEST)"
          fi

          # Set environment variables and outputs
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "IS_LATEST=$IS_LATEST" >> "$GITHUB_ENV"

          # Set output for job outputs
          echo "is_latest=$IS_LATEST" >> "$GITHUB_OUTPUT"

          echo "Version: $VERSION (Latest: $LATEST, Is Latest: $IS_LATEST)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Docker image exists
        run: |
          # Check if the Docker image with this tag exists in the registry
          echo "Checking if Docker image exists: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"

          # Authenticate with the registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Try to pull the image to verify it exists
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}; then
            echo "✅ Docker image exists: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          else
            echo "❌ Docker image does not exist: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
            echo "Please ensure the build workflow has successfully completed before publishing the release."
            exit 1
          fi

      - name: Update infrastructure
        id: update_infra
        if: env.IS_LATEST == 'true'
        run: |
          # Update the sandbox environment with the tag version
          sed -i 's/newTag: .*$/newTag: ${{ env.VERSION }}/g' apps/ai-verordening-beslishulp/sandbox/kustomization.yaml
          sed -i 's|minbzk.github.io/version: .*$|minbzk.github.io/version: ${{ env.VERSION }}|g' apps/ai-verordening-beslishulp/sandbox/kustomization.yaml

          # Commit and push changes
          git add apps/ai-verordening-beslishulp/sandbox/kustomization.yaml

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update ai-verordening-beslishulp sandbox to version ${{ env.VERSION }}"
            git push
            echo "Infrastructure repository updated"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Deployment status
        run: |
          if [ "${{ env.IS_LATEST }}" == "true" ]; then
            if [ "${{ steps.update_infra.outcome }}" == "success" ]; then
              echo "✅ Version ${{ env.VERSION }} deployment to ${{ env.APP_URL }} has been successfully initiated"
              echo "The application should be available at ${{ env.APP_URL }} within a few minutes"
              echo "✅ Using image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
            else
              echo "❌ Deployment failed"
            fi
          else
            if [[ -n "${{ env.VERSION }}" ]]; then
              echo "⚠️ Deployment skipped: Version ${{ env.VERSION }} is not the latest version"
              echo "Only the latest version is deployed to the sandbox environment"
            else
              echo "⚠️ Deployment skipped: Release tag does not follow the required 'v' prefix convention"
              echo "Only tags starting with 'v' (like v1.2.3) are supported for deployment"
            fi
          fi

  deploy_github_pages:
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success' && needs.deploy.outputs.is_latest == 'true'
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Configure Git Identity
      run: |
        git config user.email "actions@github.com"
        git config user.name "GitHub Actions"

    - name: Install requirements.txt
      run: pip install -r 'requirements.txt'

    - name: Make a folder for the diagrams
      run: mkdir -p mermaid_graphs

    - name: Generate mermaid diagrams
      run: ./script/gen_mermaid.py
      id: generate_diagrams

    - name: Commit to deployment branch
      if: steps.generate_diagrams.outcome == 'success'
      run: |
        git fetch
        git checkout --orphan deployment
        git add mermaid_graphs
        git commit -m 'Auto-generate mermaid diagrams for version ${{ github.ref_name }}'
        git push --force origin deployment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
